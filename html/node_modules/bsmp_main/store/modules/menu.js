import * as types from '../mutation-types';
import {iconsMap} from '../../constants';

const state = {
  params: null, // 参数
  menus: [], // 菜单栏列表
  menuMap: {},
  modules: {
    focus: null,
    items: []
  },
  path: '', // 操作功能查询路径
  funcs: null, // 操作功能列表
  firstPath: '' // 第一个菜单路径
};

const mutations = {
  /**
   * 获取菜单
   * @param state
   * @param params
   */
  [types.GET_MENUS] (state, params) {
    state.menus = [];
    state.params = params;
  },

  /**
   * 接受菜单列表
   * @param state
   * @param error
   * @param data
   */
  [types.RECEIVE_MENUS] (state, {error, data}) {
    if (!error) {
      if (data.code === '0') {
        let result = hasModules(data.data);
        state.menus = handleMenus(result.menus);

        // 是否有菜单模块
        if (result.has) {
          state.modules = result.modules;
        }
      }
    }
  },

  /**
   * 获取操作功能
   * @param state
   * @param path
   */
  [types.GET_FUNCS] (state, path) {
    state.path = path;
  },

  /**
   * 接受操作功能列表
   * @param state
   * @param error
   * @param data
   */
  [types.RECEIVE_FUNCS] (state, {error, data}) {
    if (!error) {
      state.funcs = state.funcs || {};
      if (data.code === '0') {
        for (let i = 0, len = data.data.length; i < len; i++) {
          state.funcs[data.data[i].code] = 1;
        }
      }
    }
  },

  /**
   * 清空操作功能列表
   * @param state
   */
  [types.CLEAR_FUNCS] (state) {
    state.funcs = null;
  },

  /**
   * 清空第一个菜单路径
   * @param state
   */
  [types.CLEAR_FIRST_PATH] (state) {
    state.firstPath = '';
  }
};

// 是否有菜单模块划分
function hasModules(data) {
  let result = {
    has: false,
    modules: {
      focus: '',
      items: []
    },
    menus: []
  };
  let item;
  for (let i = 0, len = data.length; i < len; i++) {
    item = data[i];
    if (typeof item.value !== 'undefined') {
      result.has = true;
      result.modules.items.push({name: item.name, key: item.key});

      // 有效菜单列表
      if (item.value && item.value.length) {
        result.modules.focus = item.key;
        result.menus = item.value;
      }
    } else {
      result.menus = data;
      break;
    }
  }
  return result;
}

// 菜单处理
function handleMenus(items) {
  // 重置第一个菜单路径
  state.firstPath = '';

  let menus = [], item, menu, children;
  for (let i = 0, len = items.length; i < len; i++) {
    item = items[i];
    if (item.type === 'menu' && !item.deleted) {
      menu = {
        name: item.name,
        path: item.uri,
        icon: iconsMap[item.code] || 'icon-table'
      };
      state.menuMap[menu.path] = item.code;

      if (item.children && item.children.length) {
        children = getChildren(item.children);
        if (children.length) {
          menu.children = children;
        }
      }
      menus.push(menu);
    }
  }
  return menus;
}

function getChildren(items) {
  let menus = [], item, menu, children;
  for (let i = 0, len = items.length; i < len; i++) {
    item = items[i];
    if (item.type === 'menu' && !item.deleted) {
      menu = {
        name: item.name,
        path: item.uri
      };
      state.menuMap[menu.path] = item.code;

      // 初始化第一个菜单路径
      if (!state.firstPath) {
        state.firstPath = item.uri;
      }

      if (item.children && item.children.length) {
        children = getChildren(item.children);
        if (children.length) {
          menu.children = children;
        }
      }
      menus.push(menu);
    }
  }
  return menus;
}

export default {
  state,
  mutations
};
