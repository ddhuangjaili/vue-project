/**
 * ExcellentExport 2.0.3
 * A client side Javascript export to Excel.
 *
 * @author: Jordi Burgos (jordiburgos@gmail.com)
 * @url: https://github.com/jmaister/excellentexport
 *
 */
/*jslint browser: true, bitwise: true, vars: true, white: true */
/*global define, exports, module */

const ExcellentExport = function () {

  const b64toBlob = function (b64Data, contentType, sliceSize) {
    // function taken from http://stackoverflow.com/a/16245768/2591950
    // author Jeremy Banks http://stackoverflow.com/users/1114/jeremy-banks
    contentType = contentType || '';
    sliceSize = sliceSize || 512;

    const byteCharacters = window.atob(b64Data);
    const byteArrays = [];

    let offset;
    for (offset = 0; offset < byteCharacters.length; offset += sliceSize) {
      const slice = byteCharacters.slice(offset, offset + sliceSize);

      const byteNumbers = new Array(slice.length);
      let i;
      for (i = 0; i < slice.length; i = i + 1) {
        byteNumbers[i] = slice.charCodeAt(i);
      }

      const byteArray = new window.Uint8Array(byteNumbers);

      byteArrays.push(byteArray);
    }

    return new window.Blob(byteArrays, {
      type: contentType
    });
  };

  const version = "2.0.3";
  const template = {excel: '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=ProgId content=Excel.Sheet> <meta name=Generator content="Microsoft Excel 11"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>'};
  let csvDelimiter = ",";
  let csvNewLine = "\r\n";
  const base64 = function (s) {
    return window.btoa(window.unescape(encodeURIComponent(s)));
  };
  const format = function (s, c) {
    return s.replace(new RegExp("{(\\w+)}", "g"), function (m, p) {
      return c[p];
    });
  };

  const get = function (element) {
    if (!element.nodeType) {
      return document.getElementById(element);
    }
    return element;
  };

  const fixCSVField = function (value) {
    let fixedValue = value;
    const addQuotes = (value.indexOf(csvDelimiter) !== -1) || (value.indexOf('\r') !== -1) || (value.indexOf('\n') !== -1);
    const replaceDoubleQuotes = (value.indexOf('"') !== -1);

    if (replaceDoubleQuotes) {
      fixedValue = fixedValue.replace(/"/g, '""');
    }
    if (addQuotes || replaceDoubleQuotes) {
      fixedValue = '"' + fixedValue + '"';
    }

    return fixedValue;
  };

  const tableToCSV = function (table) {
    let data = "";
    let i, j, row, col;
    for (i = 0; i < table.rows.length; i = i + 1) {
      row = table.rows[i];
      for (j = 0; j < row.cells.length; j = j + 1) {
        col = row.cells[j];
        data = data + (j ? csvDelimiter : '') + fixCSVField(col.textContent.trim());
      }
      data = data + csvNewLine;
    }
    return data;
  };

  const dataToCSV = function (filedHeader, data,) {
    let CSV = "";

    if (filedHeader) {
      for (let i = 0; i < filedHeader.length; i++) {
        CSV = CSV + (i ? csvDelimiter : '') + fixCSVField(filedHeader[i].trim());
      }
      CSV = CSV + csvNewLine;
    }

    let i, j, row, col;
    for (i = 0; i < data.length; i = i + 1) {
      row = data[i];
      j = 0;
      for (let index in row) {
        col = row[index];
        CSV = CSV + (j ? csvDelimiter : '') + fixCSVField((col || '').toString());
        j++;
      }
      CSV = CSV + csvNewLine;
    }
    return CSV;
  };

  const createDownloadLink = function (anchor, base64data, exporttype, filename) {
    let blob, btn = document.getElementById(anchor);
    if (window.navigator.msSaveBlob) {
      blob = b64toBlob(base64data, exporttype);
      window.navigator.msSaveBlob(blob, filename);
      return false;
    } else if (window.URL.createObjectURL) {
      blob = b64toBlob(base64data, exporttype);
      btn.href = window.URL.createObjectURL(blob);
    } else {
      btn.download = filename;
      btn.href = "data:" + exporttype + ";base64," + base64data;
    }

    // Return true to allow the link to work
    return true;
  };

  return {
    version: function () {
      return version;
    },
    excel: function (anchor, table, name) {
      table = get(table);
      let html = table.querySelector('.el-table__header-wrapper').innerHTML + table.querySelector('.el-table__body-wrapper').innerHTML;
      const ctx = {worksheet: name || 'Worksheet', table: html};
      const b64 = base64(format(template.excel, ctx));
      return createDownloadLink(anchor, b64, 'application/vnd.ms-excel', 'export.xls');
    },
    csv: function (anchor, table, delimiter, newLine) {
      if (delimiter !== undefined && delimiter) {
        csvDelimiter = delimiter;
      }
      if (newLine !== undefined && newLine) {
        csvNewLine = newLine;
      }

      table = get(table);
      const csvData = "\uFEFF" + tableToCSV(table);
      const b64 = base64(csvData);
      return createDownloadLink(anchor, b64, 'application/csv', 'export.csv');
    },
    csvByData: function (name, filedHeader, data, delimiter, newLine) {
      if (delimiter !== undefined && delimiter) {
        csvDelimiter = delimiter;
      }
      if (newLine !== undefined && newLine) {
        csvNewLine = newLine;
      }

      let link = document.createElement("a");
      document.body.appendChild(link);

      const csvData = "\uFEFF" + dataToCSV(filedHeader, data);
      let blob = new Blob([csvData], {type: 'text/csv'});
      let csvUrl = window.URL.createObjectURL(blob);

      link.download = name;
      link.href = csvUrl;
      if (link.onclick) {
        link.onclick();
      } else if (link.click) {
        link.click();
      }

      document.body.removeChild(link);
    },
    formatJson: function (filterVal, jsonData, columnCfg) {
      let val;
      return jsonData.map(v => filterVal.map(j => {
        val = v[j];

        if (val === null) {
          val = '';
        }

        if (columnCfg && columnCfg[j]) {
          // 映射值
          if (columnCfg[j].map) {
            if (typeof columnCfg[j].map === 'function') {
              val = columnCfg[j].map(v);
            } else {
              val = columnCfg[j].map[val] || val;
            }
          }

          // 换行显示全部内容，防止转换
          if (columnCfg[j].tab) {
            val = val + "\t";
          }
        }

        return val;
      }))
    }
  };
}();

export default ExcellentExport;
