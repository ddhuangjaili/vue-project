import formatDate from './formatDate';
import interceptors from './interceptors';
import excellentExport from './excellentExport';
import {uploadFileCfg, baseApiCodeMap} from '../constants';
import api from '../api';

export default {
  uploadFileCfg,

  // 日期格式化
  formatDate,
  interceptors,
  excellentExport,

  vue: null,
  hasToLogin: false,

  /**
   * 获取字典内容
   * @param code
   * @returns {*|AxiosPromise}
   */
  getDictByCode(code) {
    return api.getDictByPCode(code);
  },

  /**
   * outside指令
   * @param vue
   */
  outside(vue) {
    vue.directive('click-outside', {
      bind: function(el, binding, vNode) {
        // Provided expression must evaluate to a function.
        if (typeof binding.value !== 'function') {
          const compName = vNode.context.name;
          let warn = `[Vue-click-outside:] provided expression '${binding.expression}' is not a function, but has to be`;
          if (compName) { warn += `Found in component '${compName}'` }

          console.warn(warn)
        }
        // Define Handler and cache it on the element
        const bubble = binding.modifiers.bubble;
        const handler = (e) => {
          if (bubble || (!el.contains(e.target) && el !== e.target)) {
            binding.value(e)
          }
        };
        el.__vueClickOutside__ = handler;

        // add Event Listeners
        document.addEventListener('click', handler)
      },

      unbind: function(el, binding) {
        // Remove Event Listeners
        document.removeEventListener('click', el.__vueClickOutside__);
        el.__vueClickOutside__ = null

      }
    });
  },

  /**
   * 剔除空值
   * @param obj
   * @returns {*}
   */
  deleteBlank (obj) {
    let params = Object.assign({}, obj);
    for (let key in params) {
      if (!params[key]) {
        delete params[key];
      }
    }
    return params;
  },
  /**
   * 去掉空格
   * @param str
   * @returns {*}
   */
  trim (str) {
    str = str && str + '';
    return str.replace(/(^\s*)|(\s*$)/g, '');
  },

  /**
   * 验证是否符合手机号码格式
   * @param val
   */
  isMobile (val) {
    return /(^[0-9]{11})$|(^86(-){0,3}[0-9]{11})$/.test(val);
  },

  isEmail(mail) {
    let reg = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
    return !!reg.test(mail);
  },

  /**
   * 验证是否符合身份证号格式
   * @param val
   */
  isIdCard (val) {
    return /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/.test(val);
  },

  /**
   * 验证是否符合银行卡号格式
   * @param val
   */
  isBankCard (val) {
    return /^\d{16}|\d{19}$/.test(val);
  },

/**
   * 是否为正整数
   * @param s
   * @returns {boolean}
   */
  isPositiveInteger(s){
    return /^[0-9]+$/.test(s);
  },

  getToken() {
    let user = window.sessionStorage.getItem('user'),
      token = null;
    if (user) {
      user = JSON.parse(user);
      if (user.code && user.code === '0'
        && user.data && user.data.tokenVal && user.data.tokenVal.token) {
        token = user.data.tokenVal.token;
      }
    }
    return token;
  },

  /**
   * code对于的消息信息
   * @param module
   * @param data
   * @param key
   * @returns {string}
   */
  getCodeMsg(module, data, key) {
    let codeMsg = '';
    let codeMap = baseApiCodeMap[module];
    if (codeMap && data) {
      codeMsg = codeMap[data[key]] || data.msg;
    } else {
      codeMsg = data.msg || '';
    }
    return codeMsg;
  },

  /**
   * 请求错误码处理
   * @param module
   * @param data
   * @param key
   */
  handleRes(module, data, key) {
    // 提示消息
    let msg = this.getCodeMsg(module, data, key);
    if (data[key]) {
      switch (data[key]) {
        case '0':
          this.vue.$message({
            type: 'success',
            message: '操作成功'
          });
          break;
        case '0001': // API授权失败
          if (this.hasToLogin) {
            return;
          }

          this.hasToLogin = true;
          this.vue.$confirm(msg ||'API授权失败，需要重新登录!', '提示', {
            confirmButtonText: '退出登录',
            cancelButtonText: '取消',
            type: 'warning'
          }).then(() => {
            this.toLogin();
          }).catch(e => {
            this.hasToLogin = false;
          });
          break;
        case '0002': // 用户信息不存在
          if (this.hasToLogin) {
            return;
          }

          this.hasToLogin = true;
          this.vue.$alert('长时间不操作，需要重新登录!', '提示', {
            confirmButtonText: '退出登录',
            callback: action => {
              this.toLogin();
            }
          }).catch(e => {
            this.hasToLogin = false;
          });
          break;
        case '3004':
        case '31000':
          if (this.hasToLogin) {
            return;
          }

          this.hasToLogin = true;
          this.vue.$alert('Token过期，需要重新登录!', '提示', {
            confirmButtonText: '退出登录',
            callback: action => {
              this.toLogin();
            }
          }).catch(e => {
            this.hasToLogin = false;
          });
          break;
        default:
          this.vue.$message({
            type: 'warning',
            message: msg || '操作失败!'
          });
          break;
      }
    } else {
      this.vue.$message.error('操作失败!');
    }
  },

  toLogin() {
    if (this.vue.$route.path !== '/login') {
      location.href = '/#/login';
      setTimeout(() => {
        this.hasToLogin = false;
      }, 500);
    }
  },

  /**
   * 权限Map
   * @param keys
   * @returns {{}}
   */
  mapAuth(keys) {
    let funcs = this.vue.$store.state.menu.funcs,
      result = {};
    for (let key in keys) {
      result[key] = funcs && funcs[keys[key]];
    }
    return result;
  },

  getCompany() {
    return this.vue.$store.getters.company;
  },

  getUserInfo() {
    let loginUser = this.vue.$store.getters.loginUser;
    let info = {loginName: '', email: '', companyId: '', roleCode: ''};
    if (loginUser && loginUser.data) {
      if (loginUser.data.loginName) {
        info.loginName = loginUser.data.loginName;
      }
      if (loginUser.data.email) {
        info.email = loginUser.data.email;
      }
      if (loginUser.data.roleCode) {
        info.roleCode = loginUser.data.roleCode;
      }
      if (loginUser.data.companyId) {
        info.companyId = loginUser.data.companyId;
      }
    }

    return info;
  }
};
