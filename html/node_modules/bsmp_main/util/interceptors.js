import axios from 'axios';
import util from './index';
export default {
  init() {
    // Add a request interceptor
    axios.interceptors.request.use((config) => {
      // Do something before request is sent
      let user = window.sessionStorage.getItem('user'),
        token = null;
      if (user) {
        user = JSON.parse(user);
        if (user.code && user.code === '0'
          && user.data && user.data.tokenVal && user.data.tokenVal.token) {
          token = user.data.tokenVal.token;
        }
      }

      let url = config.url;

      // 必须有token才能请求的url
      if (url.indexOf('/user/login') < 0
        && url.indexOf('/user/logout') < 0 && !token) {
        return Promise.reject({code: '0002'});
      }

      // 参数追加token
      if (url.indexOf('.json') < 0 && token) {
        if (config.params) {
          config.params.token = token;
        } else if (config.data) {
          if (typeof config.data === 'string') {
            config.data = config.data + '&token=' + token;
          } else if (typeof config.data === 'object') {
            config.data.token = token;
          }
        } else {
          config.params = {token};
          config.data = config.params;
        }
      }

      let systemFlag = window.sessionStorage.getItem('systemFlag');
      if (systemFlag) {
        config.headers['cmcode'] = systemFlag;
      }
      if (token) {
        config.headers['token'] = token;
      }
      return config;
    }, function (error) {
      // Do something with request error
      return Promise.reject(error);
    });

    // Add a response interceptor
    axios.interceptors.response.use((response) => {
      let module = '';
      if (response.config.url.indexOf('/api/') > -1) {
        let slashs = response.config.url.split('/');
        module = slashs.splice(0, 3).join('/');
      }

      let codes = [0, '0', 'OK', 'ok'];
      // Do something with response data
      if (response.config.url.indexOf('/api/sys_config/log') < 0) {
        if (typeof response.data.code !== 'undefined') {
          codes.indexOf(response.data.code) < 0 && util.handleRes(module, response.data, 'code');
        } else if (typeof response.data.status !== 'undefined') {
          codes.indexOf(response.data.status) < 0 && util.handleRes(module, response.data, 'status');
        }
      }
      return response;
    }, function (error) {
      util.handleRes(error, 'code');
      // Do something with response error
      return Promise.reject(error);
    });
  }
};
